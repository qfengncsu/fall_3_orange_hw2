######## ########## ############# ########
########### Simulation HW 2 ##############
######## ########## ############# ########

library(graphics)
library(ks)
library(readxl)
library(ggplot2)
library(triangle)
library(reshape2)


#####load the dataset and preparation####
path = '/Users/vea/Desktop/NCSU/Fall3/Simulation/'
file = 'Analysis_Data.xlsx'
price = read_excel(paste(path, file, sep = '') , sheet ='Price Projections', col_types = 'numeric',skip =2 )
drilling = read_excel(paste(path, file, sep = '') , sheet ='Drilling Cost', col_types = 'numeric', skip =2 )

iteration = 10000

standardize <- function(x){
        x.std = (x - mean(x))/sd(x)
        return(x.std)
}

destandardize <- function(x.std, x){
        x.old = (x.std * sd(x)) + mean(x)
        return(x.old)
}
######Fixed value for each year
######INITAL COST - Simulate the cost of a single well at year 0
##'Year 0' expenses
seimic_cost = 960*rnorm(iteration, 600, 50)
lease_cost = 43000*rnorm(iteration, 3, 0.35)
completion_cost = rnorm(iteration,390000,50000)
prof_cost_peryear = rtriangle(iteration, 172000, 279500, 215000)

##net revenue interest
net = rnorm(iteration, 0.75, 0.02)


##tax 
tax = 0.046

#####Simulate Drilling cost based on homework 1
drilling$Date =as.Date(drilling$Date - 25569, origin = "1970-01-01")
inital_oil = drilling[[47,2]]
inital_gas = drilling[[47,3]]
inital_dry = drilling[[47,4]]
inital_avg = (inital_dry + inital_gas + inital_oil)/3

drilling = drilling[32:47,c(1,5,6,7)]
change = c(drilling[[2]], drilling[[3]], drilling[[4]])


drill_cost = rep(0, iteration)
for(i in 1:iteration){
        #2006 - 2012
        p_nor = rkde(fhat = kde(change, h = 0.07935), n = 6)
        p_nor = p_nor+1
        p1 = prod(p_nor)
        
        #2012 - 2015
        p_tri = rtriangle(3, -0.22, -0.07, -0.0917)  
        p_tri = p_tri + 1
        p2 = p1 * prod(p_tri)
        
        #2015 - 2019
        p_tri2 = rtriangle(4, 0.02, 0.06, 0.05)  
        p_tri2 = p_tri2 + 1
        p3 = p2 * prod(p_tri2)
        
         drill_cost[i] = p3
        
}
##the cost of one dry well 
cost_dry_well = seimic_cost + lease_cost + prof_cost_peryear*1 + drill_cost*inital_dry
hist(cost_dry_well)
##the cost of one wet well
drill_cost = drill_cost*inital_oil
cost_dry_well = seimic_cost + lease_cost + completion_cost + prof_cost_peryear + drill_cost


IP = exp(rnorm(iteration, 6, 0.28))
decline_rate = runif(iteration, min = 0.15, max = 0.32)

R = matrix(data = cbind(1,0.64,0.64,1), nrow = 2)
U = t(chol(R))


both = cbind(standardize(decline_rate), standardize(IP))
PD <- U %*% t(both)
PD <- t(PD)
#correlated IP and decline rate
decline_rate.r = destandardize(PD[,1], decline_rate)
IP.r = destandardize(PD[,2], IP)
########Real Simulation
#define the NPV with inital value of 0
NPV1 = rep(0,iteration)

for(i in 1:iteration){
        
        
        FNR = rep(0,15)
        revenue = rep(0,15)
        volumn = rep(0, 15)
        oil_price = list()
        oper_cost = rep(0,15)
        for(j in 1:15){
                inital = IP.r[i]
                cost = rnorm(1,2.25, 0.3)
                
                for(n in 1:j){
                        
                        end = (1-decline_rate.r[i])*inital
                        volumn[j] = 365*(inital + end)/2
                        inital = end }
                
                oil_price[[j]] = rtriangle(iteration, price[[j+1,3]], price[[j+1,2]], price[[j+1,4]])
                revenue[j] = oil_price[[j]]*volumn[j]*net[i]*(1-0.046)
                oper_cost[j] = volumn[j]*cost 
                FNR[j] = (revenue[j] -oper_cost[j] - prof_cost_peryear*j)
                
                NPV1[i] =  NPV1[i] + FNR[j]/(1.1)^j
                }
        
        
}
hist(NPV1)

plot1 = ggplot() + 
        geom_histogram(aes(x = NPV1
                           ), alpha=0.7, bins =50, position="identity", fill = 'turquoise3') +
        ylab('\nCount\n')  +
        xlab('\nNet Present Value/(dollar)') +
        ggtitle('Net Present Value of A Single Wet Well') +
        geom_vline(aes(xintercept = 0), colour="black", linetype="dashed") 
plot1

require(scales)
plot1 + scale_x_continuous(labels = comma)

