legend.title = "Reason for Pump Failure",
legend.labs = c('flood','motor','surge','jammed'),
font.legend = list(size=16),
ggtheme = theme_bw()
)
# here, i am making a new variable hour2, where i'm setting censored observations
# to have hour2 = 49 so that the function doesn't plot them as if they all had
# the event in the last week
katrina$hour2 <- ifelse(katrina$hour == 48 & katrina$survive == 1, 49, katrina$hour)
# create a new variable survive2 that is the opposite of survive
### we did this because kphaz.fit() automatically assumes 0 is censored
### and 1 is the event, and it doesn't look like this can be changed.
katrina$survive2 <- ifelse(katrina$survive==0, 1, 0)
# kphaz.fit() has the same arguments as Surv()
katrina_haz <- with(katrina, kphaz.fit(hour2, survive2))
# extract values from katrina_haz and create better visualizaiton.
k_time <- katrina_haz$time
k_haz <- katrina_haz$haz
### cumulative hazard ###
ggsurvplot(katrina_fit, fun = "cumhaz", palette = "grey")
### cumulative hazard ###
ggsurvplot(katrina_fit, fun = "cumhaz", palette = "grey",
xlab = "Time (in hours)",
color="#DE7A22")
### cumulative hazard ###
ggsurvplot(katrina_fit, fun = "cumhaz", palette = "grey",
xlab = "Time (in hours)",
palette="#DE7A22")
ggsurvplot(katrina_fit, fun = "cumhaz", palette = "grey",
xlab = "Time (in hours)",
palette="#DE7A22")
### cumulative hazard ###
ggsurvplot(katrina_fit, fun = "cumhaz", palette = "grey",
xlab = "Time (in hours)",
color="#DE7A22")
### cumulative hazard ###
ggsurvplot(katrina_fit, fun = "cumhaz", palette = "grey",
xlab = "Time (in hours)",
color="#DE7A22",
legend.title = "Reason for Pump Failure",
ggtheme = theme_bw())
# need these packages
library(data.table)
library(survival)
library(survminer)
library(muhaz)
library(ggplot2)
katrina <- fread('Survival Analysis/Data/katrina.csv')
# create a survival curve with no stratification
# survive==0 since we're interested in pump failure (non-survival)
katrina_fit <- survfit(Surv(katrina$hour, katrina$survive==0) ~ 1, data=katrina)
#plot the survival curve with no stratification
ggsurvplot(katrina_fit, data = katrina, xlab= "Time (in hours)",
conf.int = TRUE, palette = "#20948B",
legend.title = "Reason for Pump Failure",
ggtheme = theme_bw()
)
#plot the survival curve with no stratification
ggsurvplot(katrina_fit, data = katrina, xlab= "Time (in hours)",
conf.int = TRUE, palette = "#20948B",
legend.title = "Reason for Pump Failure",
ggtheme = theme_bw(),
font.x=16,
font.y=16
)
#plot the survival curve with no stratification
ggsurvplot(katrina_fit, data = katrina, xlab= "Time (in hours)",
conf.int = TRUE, palette = "#20948B",
legend.title = "Reason for Pump Failure",
ggtheme = theme_bw(),
font.x=16,
font.y=16,
font.legend = list(size=16)
)
# here, i am making a new variable hour2, where i'm setting censored observations
# to have hour2 = 49 so that the function doesn't plot them as if they all had
# the event in the last week
katrina$hour2 <- ifelse(katrina$hour == 48 & katrina$survive == 1, 49, katrina$hour)
# create a new variable survive2 that is the opposite of survive
### we did this because kphaz.fit() automatically assumes 0 is censored
### and 1 is the event, and it doesn't look like this can be changed.
katrina$survive2 <- ifelse(katrina$survive==0, 1, 0)
# kphaz.fit() has the same arguments as Surv()
katrina_haz <- with(katrina, kphaz.fit(hour2, survive2))
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function")
# extract values from katrina_haz and create better visualizaiton.
k_time <- katrina_haz$time
k_haz <- katrina_haz$haz
hazard_df <- as.data.frame(cbind(k_time, k_haz))
ggplot(data=hazard_df, y=hazard_df$k_time, x=hazard_df$k_haz)
### cumulative hazard ###
ggsurvplot(katrina_fit, fun = "cumhaz", palette = "grey",
xlab = "Time (in hours)",
color="#DE7A22",
legend.title = "Reason for Pump Failure",
ggtheme = theme_bw())
ggsurvplot(katrina_fit, data = katrina, xlab= "Time (in hours)",
conf.int = TRUE, palette = "#20948B",
legend.title = "Reason for Pump Failure",
ggtheme = theme_bw()
)
### cumulative hazard ###
ggsurvplot(katrina_fit, fun = "cumhaz", palette = "grey",
xlab = "Time (in hours)",
color="#DE7A22",
legend.title = "Reason for Pump Failure",
ggtheme = theme_bw(),
font.x=16,
font.y=16,
font.legend = list(size=16)
)
# need these packages
library(data.table)
library(survival)
library(survminer)
library(muhaz)
library(ggplot2)
katrina <- fread('Survival Analysis/Data/katrina.csv')
# create a survival curve with no stratification
# survive==0 since we're interested in pump failure (non-survival)
katrina_fit <- survfit(Surv(katrina$hour, katrina$survive==0) ~ 1, data=katrina)
#plot the survival curve with no stratification
ggsurvplot(katrina_fit, data = katrina, xlab= "Time (in hours)",
conf.int = TRUE, palette = "#20948B",
legend.title = "Reason for Pump Failure",
ggtheme = theme_bw(),
font.x=16,
font.y=16,
font.legend = list(size=16)
)
# here, i am making a new variable hour2, where i'm setting censored observations
# to have hour2 = 49 so that the function doesn't plot them as if they all had
# the event in the last week
katrina$hour2 <- ifelse(katrina$hour == 48 & katrina$survive == 1, 49, katrina$hour)
# create a new variable survive2 that is the opposite of survive
### we did this because kphaz.fit() automatically assumes 0 is censored
### and 1 is the event, and it doesn't look like this can be changed.
katrina$survive2 <- ifelse(katrina$survive==0, 1, 0)
# kphaz.fit() has the same arguments as Surv()
katrina_haz <- with(katrina, kphaz.fit(hour2, survive2))
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function")
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function" )
axis(1,cex.axis=2)
axis(1,cex.axis=1)
axis(1,cex.axis=1)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function" )
axis(1,cex.axis=1)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function" )
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function" )
cex.axis=0.5
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=0.5) )
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=0.5)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1.5)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1.2)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1.2, cex.label=2)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1.2,font.axis=2)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1.2,font.xlab=2)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1.2,xlab=2)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1.2, pch=12)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1.2, pch=17)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1.2, pch=27)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1.2)
# extract values from katrina_haz and create better visualizaiton.
k_time <- katrina_haz$time
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1.2)
mtext("Awesome Y variable", side=2, line=2.2, cex=2)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1.2, side=2)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1.2, cex=2)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1.2, cex=4)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1.2, cex=4)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1.2,cex.labl=2)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1.2,cex.main=12)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1.2,cex.main=6)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1.2,cex.main=3)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1.2,cex.main=2)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1.2,cex.main=2)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1.2,cex.main=1)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1.2,cex.main=1.5)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1.2,cex.main=1.5,cex.lab=1.2)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1.2,cex.main=1.5,cex.lab=12)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1.2,cex.main=1.5,cex.lab=2)
# and we plot it with kphaz.plot()
kphaz.plot(katrina_haz, main = "Hazard Function",cex.axis=1.2,cex.main=1.5,cex.lab=1.5)
#plot the survival curve with no stratification
ggsurvplot(katrina_fit, data = katrina, xlab= "Time (in hours)",
conf.int = TRUE, palette = "#20948B",
legend.title = "Reason for Pump Failure",
ggtheme = theme_bw(),
font.x=16,
font.y=16,
font.legend = list(size=16)
)
ggsurvplot(katrina_reason, conf.int = TRUE,
palette=c("#F4CC70", "#DE7A22","#20948B","#A43820"),
xlab = "Time (in hours)",
font.x=16,
font.y=16,
font.axis=2,
legend.title = "Reason for Pump Failure",
legend.labs = c('flood','motor','surge','jammed'),
font.legend = list(size=16),
ggtheme = theme_bw()
)
# stratify by reason and plot
katrina_reason <- survfit(Surv(katrina$hour, katrina$survive==0) ~ katrina$reason, data = katrina, subset = katrina$reason !=0)
ggsurvplot(katrina_reason, conf.int = TRUE,
palette=c("#F4CC70", "#DE7A22","#20948B","#A43820"),
xlab = "Time (in hours)",
font.x=16,
font.y=16,
font.axis=2,
legend.title = "Reason for Pump Failure",
legend.labs = c('flood','motor','surge','jammed'),
font.legend = list(size=16),
ggtheme = theme_bw()
)
ggsurvplot(katrina_reason, conf.int = TRUE,
palette=c("#F4CC70", "#DE7A22","#20948B","#A43820"),
xlab = "Time (in hours)",
font.x=16,
font.y=16,
font.axis=4,
legend.title = "Reason for Pump Failure",
legend.labs = c('flood','motor','surge','jammed'),
font.legend = list(size=16),
ggtheme = theme_bw()
)
ggsurvplot(katrina_reason, conf.int = TRUE,
palette=c("#F4CC70", "#DE7A22","#20948B","#A43820"),
xlab = "Time (in hours)",
font.x=16,
font.y=16,
font.axis=7,
legend.title = "Reason for Pump Failure",
legend.labs = c('flood','motor','surge','jammed'),
font.legend = list(size=16),
ggtheme = theme_bw()
)
ggsurvplot(katrina_reason, conf.int = TRUE,
palette=c("#F4CC70", "#DE7A22","#20948B","#A43820"),
xlab = "Time (in hours)",
font.x=16,
font.y=16,
labs.size=12,
legend.title = "Reason for Pump Failure",
legend.labs = c('flood','motor','surge','jammed'),
font.legend = list(size=16),
ggtheme = theme_bw()
)
ggsurvplot(katrina_reason, conf.int = TRUE,
palette=c("#F4CC70", "#DE7A22","#20948B","#A43820"),
xlab = "Time (in hours)",
font.x=16,
font.y=16,
font.labs =16
legend.title = "Reason for Pump Failure",
legend.labs = c('flood','motor','surge','jammed'),
font.legend = list(size=16),
ggtheme = theme_bw()
)
ggsurvplot(katrina_reason, conf.int = TRUE,
palette=c("#F4CC70", "#DE7A22","#20948B","#A43820"),
xlab = "Time (in hours)",
font.x=16,
font.y=16,
font.labs =16,
legend.title = "Reason for Pump Failure",
legend.labs = c('flood','motor','surge','jammed'),
font.legend = list(size=16),
ggtheme = theme_bw()
)
ggsurvplot(katrina_reason, conf.int = TRUE,
palette=c("#F4CC70", "#DE7A22","#20948B","#A43820"),
xlab = "Time (in hours)",
font.x=16,
font.y=16,
font.axis=7,
legend.title = "Reason for Pump Failure",
legend.labs = c('flood','motor','surge','jammed'),
font.legend = list(size=16),
ggtheme = theme_bw()
)
ggsurvplot(katrina_reason, conf.int = TRUE,
palette=c("#F4CC70", "#DE7A22","#20948B","#A43820"),
xlab = "Time (in hours)",
font.x=16,
font.y=16,
font.axis=100,
legend.title = "Reason for Pump Failure",
legend.labs = c('flood','motor','surge','jammed'),
font.legend = list(size=16),
ggtheme = theme_bw()
)
ggsurvplot(katrina_reason, conf.int = TRUE,
palette=c("#F4CC70", "#DE7A22","#20948B","#A43820"),
xlab = "Time (in hours)",
font.x=16,
font.y=16,
font.axis=100,
legend.title = "Reason for Pump Failure",
legend.labs = c('flood','motor','surge','jammed'),
font.legend = list(size=16),
ggtheme = theme_bw()
)
#####load the dataset####
path = 'Simulation and Risk/Data/'
file = 'Analysis_Data.xlsx'
t
price = read_excel(paste(path, file, sep = '') , sheet ='Price Projections', col_types = 'numeric',skip =2 )
library(readxl)
price = read_excel(paste(path, file, sep = '') , sheet ='Price Projections', col_types = 'numeric',skip =2 )
View(price)
drilling = read_excel(paste(path, file, sep = '') , sheet ='Drilling Cost', col_types = 'numeric', skip =2 )
View(drilling)
drilling$Date =as.Date(drilling$Date - 25569, origin = "1970-01-01")
inital_oil = drilling[[47,2]]
inital_gas = drilling[[47,3]]
inital_dry = drilling[[47,4]]
inital_avg = (inital_dry + inital_gas + inital_oil)/3
drilling = drilling[32:47,c(1,5,6,7)]
change = c(drilling[[2]], drilling[[3]], drilling[[4]])
change
########## Distribution Selection - Kernel Estimation from 2006 to 2012 ########
hist(change)
density.change <- density(change, bw="SJ-ste")
density.change
#Bandwidth 'bw' = 0.07935
set.seed(12345)
Est.change <- rkde(fhat = kde(change, h = 0.07935), n = 10000)
library(ks)
Est.change <- rkde(fhat = kde(change, h = 0.07935), n = 10000)
hist(Est.change,  breaks=50)
qqnorm(change)
qqline(change)
########## 1. Use normal distribution ##########
mean = mean(change)
standard = sd(change)
a = rep(0, 100000)
b = rep(0, 100000)
for(i in 1:100000){
#2006 - 2012
p_nor = rnorm(6, mean, standard)
p_nor = p_nor+1
p1 = prod(p_nor)
#2012 - 2015
p_tri = rtriangle(3, -0.22, -0.07, -0.0917)
p_tri = p_tri + 1
p2 = p1 * prod(p_tri)
#2015 - 2019
p_tri2 = rtriangle(4, 0.02, 0.06, 0.05)
p_tri2 = p_tri2 + 1
p3 = p2 * prod(p_tri2)
a[i] = p3
}
hist(a, breaks = 50)
for(i in 1:100000){
#2006 - 2012
p_nor = rnorm(6, mean, standard)
p_nor = p_nor+1
p1 = prod(p_nor)
#2012 - 2015
p_tri = rtriangle(3, -0.22, -0.07, -0.0917)
p_tri = p_tri + 1
p2 = p1 * prod(p_tri)
#2015 - 2019
p_tri2 = rtriangle(4, 0.02, 0.06, 0.05)
p_tri2 = p_tri2 + 1
p3 = p2 * prod(p_tri2)
a[i] = p3
}
library(triangle)
for(i in 1:100000){
#2006 - 2012
p_nor = rnorm(6, mean, standard)
p_nor = p_nor+1
p1 = prod(p_nor)
#2012 - 2015
p_tri = rtriangle(3, -0.22, -0.07, -0.0917)
p_tri = p_tri + 1
p2 = p1 * prod(p_tri)
#2015 - 2019
p_tri2 = rtriangle(4, 0.02, 0.06, 0.05)
p_tri2 = p_tri2 + 1
p3 = p2 * prod(p_tri2)
a[i] = p3
}
hist(a, breaks = 50)
for(i in 1:100000){
#2006 - 2012
p_nor = rkde(fhat = kde(change, h = 0.07935), n = 6)
p_nor = p_nor+1
p1 = prod(p_nor)
#2012 - 2015
p_tri = rtriangle(3, -0.22, -0.07, -0.0917)
p_tri = p_tri + 1
p2 = p1 * prod(p_tri)
#2015 - 2019
p_tri2 = rtriangle(4, 0.02, 0.06, 0.05)
p_tri2 = p_tri2 + 1
p3 = p2 * prod(p_tri2)
b[i] = p3
}
hist(b, breaks = 50)
.
way1 = data.frame(a*inital_oil, a*inital_gas, a*inital_dry)
colnames(way1) = c('Oil Well', 'Gas Well', 'Dry Well')
way1$Avg = (way1[,1] + way1[,2] + way1[,3])/3
View(way1)
way2 = data.frame(b*inital_oil, b*inital_gas, b*inital_dry)
colnames(way1) = c('Oil Well', 'Gas Well', 'Dry Well')
way2$Avg = (way2[,1] + way2[,2] + way2[,3])/3
combine = data.frame(way1$Avg, way2$Avg)
colnames(combine) = c('Normality', 'Kernel Density')
combine2 = melt(combine)
combine = data.frame(way1$Avg, way2$Avg)
way1 = data.frame(a*inital_oil, a*inital_gas, a*inital_dry)
colnames(way1) = c('Oil Well', 'Gas Well', 'Dry Well')
way1$Avg = (way1[,1] + way1[,2] + way1[,3])/3
way2 = data.frame(b*inital_oil, b*inital_gas, b*inital_dry)
colnames(way1) = c('Oil Well', 'Gas Well', 'Dry Well')
way2$Avg = (way2[,1] + way2[,2] + way2[,3])/3
View(way2)
combine = data.frame(way1$Avg, way2$Avg)
way2 = data.frame(b*inital_oil, b*inital_gas, b*inital_dry)
colnames(way2) = c('Oil Well', 'Gas Well', 'Dry Well')
way2$Avg = (way2[,1] + way2[,2] + way2[,3])/3
way1$Avg = (way1[,1] + way1[,2] + way1[,3])/3
way2$Avg = (way2[,1] + way2[,2] + way2[,3])/3
way1 = data.frame(a*inital_oil, a*inital_gas, a*inital_dry)
colnames(way1) = c('Oil Well', 'Gas Well', 'Dry Well')
way1$Avg = (way1[,1] + way1[,2] + way1[,3])/3
way2 = data.frame(b*inital_oil, b*inital_gas, b*inital_dry)
colnames(way2) = c('Oil Well', 'Gas Well', 'Dry Well')
way2$Avg = (way2[,1] + way2[,2] + way2[,3])/3
View(way1)
View(way2)
combine = data.frame(way1$Avg, way2$Avg)
View(combine)
colnames(combine) = c('Normality', 'Kernel Density')
combine2 = melt(combine)
library(reshape2)
library(graphics)
combine2 = melt(combine)
View(combine2)
colnames(combine2) = c('Method','Price')
plot1 = ggplot(combine2) +
geom_histogram(aes(x = Price, y = (..count..)/100000,
fill = Method), alpha=0.5, bins =50, position="identity") +
ylab('\nRelative Frequency\n')  +
xlab('\n2019 Drilling Costs') +
ggtitle('2019 Drilling Costs by Two Simulation Methods') +
geom_vline(aes(xintercept = inital_avg), colour="black", linetype="dashed") +
annotate("text", x = 1500, y = 0.08, label = '2006 Costs', angle = 90)
library(ggplot2)
plot1 = ggplot(combine2) +
geom_histogram(aes(x = Price, y = (..count..)/100000,
fill = Method), alpha=0.5, bins =50, position="identity") +
ylab('\nRelative Frequency\n')  +
xlab('\n2019 Drilling Costs') +
ggtitle('2019 Drilling Costs by Two Simulation Methods') +
geom_vline(aes(xintercept = inital_avg), colour="black", linetype="dashed") +
annotate("text", x = 1500, y = 0.08, label = '2006 Costs', angle = 90)
plot1
plot2 = ggplot(way2) +
geom_histogram(aes(x = Avg, y = (..count..)/100000), alpha=0.7, fill = 'turquoise3', bins =50, position="identity") +
ylab('Relative Frequency') +
xlab('2019 Drilling Costs') +
ggtitle('Simulation of 2019 Drilling Costs by Kernel Density') +
geom_vline(aes(xintercept = inital_avg), colour="black", linetype="dashed") +
annotate("text", x = 1500, y = 0.08, label = '2006 Costs', angle = 90)
plot2
inital_oil*quantile(a, probs = c( 0.05,0.5, 0.95))
quantile(b, probs = c(0, 0.05,0.5, 0.95))
quantile(b, probs = c(0, 0.05,0.5, 0.95))
inital_oil*quantile(b, probs = c(0, 0.05,0.5, 0.95))
quantile(way2$`Oil Well`, probs = c(0, 0.05,0.5, 0.95))
